     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fscanf,fclose,printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll 
    10                                  import fscanf msvcrt.dll 
    11                                  import printf msvcrt.dll  
    12                                  import fclose msvcrt.dll                       ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 256420202000                format db "%d   ",0
    18 00000006 66696C652E74787400          file db "file.txt",0
    19 0000000F FFFFFFFF                    descriptor dd -1
    20 00000013 7200                        access db "r",0
    21 00000015 00000000                    a dd 0
    22 00000019 666B000000000000            message dd "fk",0
    23                                     
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 68[13000000]                    push dword access 
    29 00000005 68[06000000]                    push dword file 
    30 0000000A FF15[00000000]                  call [fopen]
    31 00000010 83C408                          add esp,4*2
    32                                          
    33 00000013 83F800                          cmp eax,0 
    34 00000016 0F8494000000                    je error_ 
    35                                          
    36 0000001C A3[0F000000]                    mov [descriptor],eax
    37                                          
    38 00000021 68[15000000]                    push dword a
    39 00000026 68[00000000]                    push dword format 
    40 0000002B FF35[0F000000]                  push dword [descriptor]
    41 00000031 FF15[00000000]                  call [fscanf]
    42 00000037 83C40C                          add esp,4*3
    43                                          
    44                                        
    45                                          ; printeaza 123
    46 0000003A FF35[15000000]                  push dword [a]
    47 00000040 68[00000000]                    push dword format
    48 00000045 FF15[00000000]                  call [printf]
    49 0000004B 83C408                          add esp,4*2
    50                                          
    51                                          ;sa vedem daca printeaza 121
    52 0000004E 802D[15000000]02                sub [a],byte 2
    53                                          
    54 00000055 FF35[15000000]                  push dword [a]
    55 0000005B 68[00000000]                    push dword format
    56 00000060 FF15[00000000]                  call [printf]
    57 00000066 83C408                          add esp,4*2
    58                                          
    59                                          ; sa vedem daca printeaza cifrele separat 
    60 00000069 66BB0A00                        mov bx,word 10
    61 0000006D A1[15000000]                    mov eax,[a]
    62                                          cifre: 
    63 00000072 31D2                                xor edx,edx
    64 00000074 66F7F3                              div bx 
    65 00000077 6683F800                            cmp ax,0
    66 0000007B 7400                                je urm_
    67                                              urm_: 
    68 0000007D 6683FA00                            cmp dx,0
    69 00000081 741C                                je out_
    70 00000083 60                                  pushad
    71 00000084 52                                  push dword edx
    72 00000085 68[00000000]                        push dword format 
    73 0000008A FF15[00000000]                      call [printf]
    74 00000090 83C408                              add esp,4*2
    75                                              
    76 00000093 61                                  popad 
    77 00000094 66BA0000                            mov dx,0
    78 00000098 6652                                push dx 
    79 0000009A 6650                                push ax 
    80 0000009C 58                                  pop eax
    81                                              
    82 0000009D EBD3                                jmp cifre
    83                                          out_:
    84 0000009F FF35[0F000000]                  push dword [descriptor]
    85 000000A5 FF15[00000000]                  call [fclose]
    86 000000AB 83C404                          add esp,4
    87 000000AE EB00                            jmp end_
    88                                          
    89                                           error_:
    90                                          
    91                                          end_: 
    92 000000B0 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    93 000000B2 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
