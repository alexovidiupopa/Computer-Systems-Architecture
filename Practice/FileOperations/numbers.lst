     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit,scanf,printf               ; tell nasm that exit exists even if we won't be defining it
     6                                  import exit msvcrt.dll 
     7                                  import printf msvcrt.dll
     8                                  import scanf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  ;in this file I will read/print a number/more numbers from the keyboard
    10                                  segment data use32 class=data
    11 00000000 00                          a db 0
    12 00000001 00000000<rept>              integers times 100 dd 0
    13 00000191 256400                      format db "%d",0
    14 00000194 00                          len db 0
    15 00000195 613D00                      mes1 db "a=",0
    16 00000198 546865206E756D6265-         mes2 db "The number you read is:%d",10,13,0
    16 000001A1 7220796F7520726561-
    16 000001AA 642069733A25640A0D-
    16 000001B3 00                 
    17 000001B4 4C656E6774683A2564-         mesLen db "Length:%d",0
    17 000001BD 00                 
    18 000001BE 202020256400                mesPrint db "   %d",0
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 68[95010000]                    push dword mes1 
    22 00000005 FF15[00000000]                  call [printf]
    23 0000000B 83C404                          add esp,4
    24                                      
    25 0000000E 68[00000000]                    push dword a 
    26 00000013 68[91010000]                    push dword format 
    27 00000018 FF15[00000000]                  call [scanf]
    28 0000001E 83C408                          add esp,4*2
    29                                          
    30 00000021 FF35[00000000]                  push dword [a]
    31 00000027 68[98010000]                    push dword mes2
    32 0000002C FF15[00000000]                  call [printf]
    33 00000032 83C408                          add esp,4*2
    34                                          
    35                                          
    36                                          
    37                                          ; read numbers until -1 is entered
    38 00000035 B964000000                      mov ecx,100
    39 0000003A FC                              cld 
    40 0000003B BB01000000                      mov ebx,1
    41                                          read_numbers:
    42 00000040 51                                  push ecx 
    43 00000041 68[95010000]                        push dword mes1 
    44 00000046 FF15[00000000]                      call [printf]
    45 0000004C 83C404                              add esp,4
    46                                              
    47 0000004F 68[00000000]                        push dword a
    48 00000054 68[91010000]                        push dword format 
    49 00000059 FF15[00000000]                      call [scanf]
    50 0000005F 83C408                              add esp,4*2
    51                                              
    52 00000062 A1[00000000]                        mov eax,[a]
    53 00000067 83F8FF                              cmp eax,-1
    54 0000006A 740B                                je stop_reading
    55                                              
    56 0000006C 89049D[01000000]                    mov dword [integers+4*ebx],eax   ; store the integer 
    57                                              
    58 00000073 43                                  inc ebx 
    59 00000074 59                                  pop ecx 
    60 00000075 E2C9                                loop read_numbers
    61                                          
    62                                          stop_reading:
    63 00000077 891D[94010000]                      mov dword [len],ebx
    64                                              
    65 0000007D FF35[94010000]                  push dword [len] 
    66 00000083 68[B4010000]                    push dword mesLen
    67 00000088 FF15[00000000]                  call [printf]
    68 0000008E 83C408                          add esp,4*2
    69                                          
    70                                          ; print the list of numbers
    71 00000091 8B0D[94010000]                  mov ecx,[len]
    72 00000097 BE[01000000]                    mov esi,integers  
    73                                          
    74                                          print_nums:
    75 0000009C 51                                  push ecx
    76 0000009D AD                                  lodsd
    77 0000009E 50                                  push dword eax 
    78 0000009F 68[BE010000]                        push dword mesPrint
    79 000000A4 FF15[00000000]                      call [printf]
    80 000000AA 83C408                              add esp,4*2 
    81 000000AD 59                                  pop ecx
    82 000000AE E2EC                                loop print_nums
    83 000000B0 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    84 000000B2 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
