     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit,scanf,printf               ; tell nasm that exit exists even if we won't be defining it
     6                                  import exit msvcrt.dll 
     7                                  import printf msvcrt.dll
     8                                  import scanf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  ;in this file I will read/print a number/more numbers from the keyboard
    10                                  segment data use32 class=data
    11 00000000 00                          a db 0
    12 00000001 00000000<rept>              integers times 100 dd 0
    13 00000191 256400                      format db "%d",0
    14 00000194 00                          len db 0
    15 00000195 613D00                      mes1 db "a=",0
    16 00000198 546865206E756D6265-         mes2 db "The number you read is:%d",10,13,0
    16 000001A1 7220796F7520726561-
    16 000001AA 642069733A25640A0D-
    16 000001B3 00                 
    17 000001B4 4C656E6774683A2564-         mesLen db "Length:%d",10,13,0
    17 000001BD 0A0D00             
    18 000001C0 202020256400                mesPrint db "   %d",0
    19                                  segment code use32 class=code
    20                                      start:
    21                                          
    22                                          
    23                                          
    24                                          ; read numbers until -1 is entered
    25 00000000 B964000000                      mov ecx,100
    26 00000005 FC                              cld 
    27 00000006 BB01000000                      mov ebx,1
    28                                          read_numbers:
    29 0000000B 51                                  push ecx 
    30 0000000C 68[95010000]                        push dword mes1 
    31 00000011 FF15[00000000]                      call [printf]
    32 00000017 83C404                              add esp,4
    33                                              
    34 0000001A 68[00000000]                        push dword a
    35 0000001F 68[91010000]                        push dword format 
    36 00000024 FF15[00000000]                      call [scanf]
    37 0000002A 83C408                              add esp,4*2
    38                                              
    39 0000002D A1[00000000]                        mov eax,[a]
    40 00000032 83F8FF                              cmp eax,-1
    41 00000035 740B                                je stop_reading
    42                                              
    43 00000037 89049D[01000000]                    mov dword [integers+4*ebx],eax   ; store the integer 
    44                                              
    45 0000003E 43                                  inc ebx 
    46 0000003F 59                                  pop ecx 
    47 00000040 E2C9                                loop read_numbers
    48                                          
    49                                          stop_reading:
    50 00000042 891D[94010000]                      mov dword [len],ebx
    51                                              
    52 00000048 FF35[94010000]                  push dword [len] 
    53 0000004E 68[B4010000]                    push dword mesLen
    54 00000053 FF15[00000000]                  call [printf]
    55 00000059 83C408                          add esp,4*2
    56                                          
    57                                          ; print the list of numbers
    58 0000005C 8B0D[94010000]                  mov ecx,[len]
    59 00000062 BE04000000                      mov esi,4  
    60                                          
    61                                          print_nums:
    62 00000067 51                                  push ecx
    63 00000068 8B86[01000000]                      mov eax,[integers+esi]
    64 0000006E 50                                  push dword eax 
    65 0000006F 68[C0010000]                        push dword mesPrint
    66 00000074 FF15[00000000]                      call [printf]
    67 0000007A 83C408                              add esp,4*2 
    68 0000007D 59                                  pop ecx
    69 0000007E 83C604                              add esi,4
    70 00000081 E2E4                                loop print_nums
    71 00000083 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    72 00000085 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
