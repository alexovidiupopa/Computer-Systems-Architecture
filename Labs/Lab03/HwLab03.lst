     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;  a,c-byte; b-word; d-doubleword; x-qword - unsigned
    14 00000000 05                          a db 5
    15 00000001 0200                        b dw 2
    16 00000003 07                          c db 7
    17 00000004 56080000                    d dd 2134
    18 00000008 1639000000000000            x dq 14614
    19 00000010 02                          two db 2
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; d-(7-a*b+c)/a-6+x/2;
    24 00000000 31C0                            xor eax,eax 
    25 00000002 31DB                            xor ebx,ebx
    26 00000004 31C9                            xor ecx,ecx 
    27 00000006 31D2                            xor edx,edx
    28 00000008 668B1D[04000000]                mov bx,word [d]
    29 0000000F 668B0D[06000000]                mov cx,word [d+2] ; cx:bx = d 
    30                                          
    31 00000016 A0[00000000]                    mov al,[a] ; al = a 
    32 0000001B 66F725[01000000]                mul word [b] ; ax = a * b
    33                                      
    34 00000022 66BA0700                        mov dx, 7
    35 00000026 6629C2                          sub dx,ax ;dx = 7-a*b
    36                                          
    37 00000029 A0[03000000]                    mov al,[c]
    38 0000002E B400                            mov ah,0 ; AX = c 
    39                                          
    40 00000030 6601C2                          add dx,ax ;dx = 7-a*b+c
    41                                          
    42 00000033 6689D0                          mov ax,dx ; ax = 7-a*b+c
    43 00000036 F635[00000000]                  div byte [a] ; al = (7-a*b+c)/a
    44                                          
    45 0000003C B400                            mov ah,0 ; ax = (7-a*b+c)/a word
    46 0000003E 66BA0000                        mov dx,0; dx:ax = (7-a*b+c)/a dword
    47                                          
    48 00000042 6629C3                          sub bx,ax 
    49 00000045 6619D1                          sbb cx,dx ; cx:bx = d-(7-a*b+c)/a
    50                                          
    51 00000048 B006                            mov al,6
    52 0000004A B400                            mov ah,0
    53 0000004C 66BA0000                        mov dx,0 ; dx:ax = 6 
    54                                          
    55 00000050 6629C3                          sub bx,ax
    56 00000053 6619D1                          sbb cx,dx ; cx:bx = d-(7-a*b+c)/a
    57                                  
    58 00000056 A1[08000000]                    mov eax,[x]
    59 0000005B 8B15[0C000000]                  mov edx,[x+4] ;edx:eax = x 
    60                                          
    61 00000061 66BE0200                        mov SI,2
    62 00000065 66F7F6                          div SI ; eax = dx:ax = x/2
    63                                          
    64 00000068 6601D8                          add ax,bx
    65 0000006B 6611CA                          adc dx,cx ; dx:ax = d-(7-a*b+c)/a-6+x/2
    66                                          ; exit(0)
    67 0000006E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000070 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
