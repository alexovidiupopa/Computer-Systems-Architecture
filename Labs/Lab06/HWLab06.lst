     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions 
    10                                  
    11                                                            
    12                                  ; 25. A string of bytes is given. Obtain the mirror image of the binary representation of this string of bytes.
    13                                  ; Ex : s DB 01011100b, 10001001b, 11100101b             5C | 89 | E5
    14                                  ; Result : d DB 10100111b, 10010001b, 00111010b.        A7 | 91 | 3A
    15                                  
    16                                  segment data use32 class=data
    17 00000000 5C89E50F                    S db 01011100b , 10001001b , 11100101b , 0Fh     ; added 0Fh just to test it all
    18                                      L equ $-S
    19 00000004 00<rept>                    D times L db 0
    20                                  
    21                                  
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 B900000000                      mov ecx , 0
    25 00000005 B104                            mov cl , L  ; we keep the length in CL
    26 00000007 BE[00000000]                    mov esi , S     ; we keep the element in S
    27 0000000C BF[07000000]                    mov edi , D+L-1     ; we put the element in the opposite location of D
    28                                          
    29                                          loop_string:
    30 00000011 FC                                  cld     ; we go through S from left to right, DF = 0
    31 00000012 AC                                  lodsb   ; we put element from S in AL 
    32                                              
    33 00000013 88CA                                mov dl , cl     ; we save CL in DL
    34 00000015 B108                                mov cl , 8      ; we do the mirror image for 8 bits  (a byte)
    35 00000017 BB00000000                          mov ebx , 0     ; we clear EBX , in which we will keep the mirror image
    36                                              
    37                                              mirror_image:
    38 0000001C D0D0                                    rcl al , 1      ; we take the bits one by one by using the carry flag
    39 0000001E D0DB                                    rcr bl , 1      ; we put the bits one by one in reverse order in BL
    40 00000020 E2FA                                loop mirror_image     ; loops 8 times for each bit in the byte
    41                                              
    42 00000022 88D8                                mov al , bl     ; we put the palindrome into AL
    43 00000024 88D1                                mov cl , dl     ; we resume to the outer loop
    44                                              
    45 00000026 FD                                  std    ; we go through D from right to left
    46 00000027 AA                                  stosb   ; we put element from AL in D
    47 00000028 E2E7                            loop loop_string
    48                                          
    49 0000002A 6A00                            push    dword 0     
    50 0000002C FF15[00000000]                  call    [exit]       
